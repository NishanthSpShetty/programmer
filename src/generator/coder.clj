(ns generator.coder
  (:require [clojure.java.io :as io]))

(defn get-tokenizer-code
  []
  (str "\n(defn to-token\n\"split the rag string into tokens\"\n\t[arg]\n\t"
       "(clojure.string/split arg #\" \")\n\n"
       ")"))


(defn get-to-number-code []
  (str "\n(defn to-number \n\t[num-str]\n\t"
       "(try \n\t(Integer. num-str)\n\t(catch Exception e 0))"
       ")\n\n"))


(defn write-main
  [root-dir nsspace operator]

  (with-open [writer (io/writer (io/file root-dir "src/main/core.clj"))]
    (.write writer (str ";;Auto generated by programmer \n;;Operation " (name operator)))
    (.write writer  (str "\n(ns main.core\n (:gen-class)\n\t(:require [" nsspace "]) )\n\n"))
    ;(defn -main
    ;   [&args]
    ;   ( println ">(+ 10 100)"
    ;   (println (+ 10 100))
    ;)

    (.write writer (get-tokenizer-code))
    (.write writer (get-to-number-code))

    (.write writer  (str "(defn -main\n;;begin\n[& args]\n (println \"Enter two number to " (name operator) "\")\n"
                         "\t(let [input (read-line) tokens (to-token input)]\n"
                         "\t\t(println (" nsspace "/" (name operator) " (to-number (tokens 0)) (to-number (tokens 1))) ) )"
                         "\n)"))))

(defn get-adder-content
  [start end]


  (str
   "(defn add \n\"Add given two number very fast with no arithmetic operation\"\n[num1 num2]\n"
   "(cond \n\t(= num1 0)\n num2\n"
   "\t(= num2 0)\n num1\n"
   ;;generate all possible combination of number in range (start end)
   (apply str
          (for [x (range 1 (inc start))  y (range 1 (inc end))]
            (str "\t(and (= num1 " x ") (= num2 " y ")) " (+ x y) "\n")))
   ")\n)"))

(defn code-adder
  "generate code for adding numners between range of start to end "
  [root-dir operator-str operator start end]
  (-> (io/file root-dir "src/adder/")
      (.mkdir))
  (with-open [writer (io/writer (io/file root-dir "src/adder/core.clj"))]
    (.write writer (str ";;Auto generated by programmer \n\n"))
    (.write writer  "\n(ns adder.core )\n\n")
    (.write writer (get-adder-content start end)))
  (write-main root-dir "adder.core" operator))

(defn code-substract
  "generate code for adding numbers between range of start to end "
  [root-dir start end])

(defn code-multipier
  "generate code for adding numbers between range of start to end "
  [root-dir start end])

(defn code-divide
  "generate code for adding numbers between range of start to end "
  [root-dir start end])




(defn write-code
  [root-dir operator operator-str start end]
  (println "Writing main method")
  (case operator
    :add (code-adder  root-dir operator-str operator start end)
    :subtract (code-substract root-dir start end)
    :multiply (code-multipier  root-dir start end)
    :divide (code-divide   root-dir start end)))




(defn write-test
  [root-dir operator operator-str start end]
  (with-open  [writer (io/writer (io/file root-dir "test/main/core_test.clj"))]
    (.write writer ";;Auto generated by programmer\n")
    (.write writer "(ns main.core\n (:require [clojure.test :refer :all]\n[main.core :refer :all] ) )\n\n")
    (.write writer "(deftest main-test\n;;begin\n(testing \"testing main\" ) \n(is true))")))



