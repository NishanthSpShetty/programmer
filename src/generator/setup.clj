(ns 'generator.setup
  (:require [clojure.java.io :as io]))



(defn create-project-dir
  [dir-name]
  (let [dir (io/file dir-name)]
    (if (.mkdir dir)
      dir
      (throw (java.io.IOException "failed to create project directory")))))

;; Miscellanies  file required for the projects
(defn write-misc-file
  [root-dir operator operator-str start end]
  (with-open [writer (io/writer (io/file root-dir "README.md"))]
    (let [content (str "## " root-dir "\n"
                       "\n>Program generated by `programmer`, a programmer tool, powered by `clojure`\n"
                       "\n### " root-dir "\n"
                       "A program to perform " operator-str " on given input numbers who's number is in range of " start " and " end
                       "(inclusive)\n\n If your number is missing please ask programmer to write another program for you"
                       "\n\n### Usage \n This program is generated for leinigen tools, so you can use lein to pretty much for anything lein does \n\n"
                       "```\nlein run number1 number2"
                       "```\n ### example \n```\n lein run 1 2\n>3 (if operator is +)\n````"
                       "\n\n### Issues?\n Issues doesnt matter here, I urge you to ignore them, but still if you want to report, report the `programmer` the `master`"
                       "\n\nThank you for using me, dobi is happy")]
      (.write writer content)))
  ;;.gitignore,
  (with-open [writer (io/writer (io/file root-dir ".gitignore"))]
    (.write writer "#Im not gonna ignore anything! everything matters"))
  (with-open [writer (io/writer (io/file root-dir "LICENSE"))]
    (.write writer "Do whatever you want!"))

  (with-open [writer (io/writer (io/file root-dir "CHANGELOG.md"))]
    (.write writer "#Auto generated, master knows everything.")))


;;project.clj is specific for leiningen
(defn write-project-clj
  [root-dir]
  (with-open [writer (io/writer (io/file root-dir "project.clj"))]

    (let [content (str "(defproject " root-dir "\"0.1.0-RELEASE\""
                       "\ndescription \"FIXME: write description\""
                       "\n:url \"http://example.com/FIXME\""
                       "\n:license {:name \"EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0\""
                       "\n:url \"https://www.eclipse.org/legal/epl-2.0/\"}"
                       "\n:dependencies [[org.clojure/clojure \"1.10.0\"]]"
                       "\n:main ^:skip-aot main.core"
                       "\n:target-path \"target/%s\""
                       "\n:profiles {:uberjar {:aot :all}})")]

      (.write writer content))))

(defn create-project-files
  "creat all the setup for clojure , for leiningen"
  [root-dir operator operator-str start end]

  ((.mkdir (io/file root-dir "src/main")))
  
  ((.mkdir (io/file root-dir "test/main")))
  ;;create project.clj
  (write-project-clj root-dir)
  (write-misc-file root-dir operator operator-str start end))


(defn set-it-up
  "setup projects"
  [operator operator-str start end]
  (let [project-name (str operator-str "_between_" start "_and_" end)
        root-dir (create-project-dir project-name)]
    ;;setup git ? may be later
    ;;setup for clojure now.
    (create-project-files root-dir operator operator-str start end)))